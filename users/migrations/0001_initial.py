# Generated by Django 3.0.1 on 2020-06-15 18:24

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last Name')),
                ('institute', models.CharField(blank=True, max_length=50, verbose_name='Institute')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last name')),
                ('citizenship', models.CharField(blank=True, max_length=30, verbose_name='Citizenship')),
                ('current_institute', models.CharField(blank=True, max_length=50, verbose_name='Current institute')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=30, verbose_name='City')),
                ('province', models.CharField(blank=True, max_length=30, verbose_name='Province')),
                ('postal', models.CharField(blank=True, max_length=30, verbose_name='Zip/Postal')),
                ('country', models.CharField(blank=True, max_length=30, verbose_name='Country')),
                ('phd_institute', models.CharField(blank=True, max_length=50, verbose_name='PhD institute')),
                ('phd_year', models.CharField(blank=True, max_length=50, verbose_name='Phd year')),
                ('research_interests', models.CharField(blank=True, max_length=100, verbose_name='Research interests')),
                ('resume', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('research_statement', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('publication', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('ref_1_email', models.EmailField(blank=True, max_length=255, verbose_name='Email')),
                ('ref_1_name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('ref_1_sent', models.BooleanField(default=False)),
                ('ref_2_email', models.EmailField(blank=True, max_length=255, verbose_name='Email')),
                ('ref_2_name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('ref_2_sent', models.BooleanField(default=False)),
                ('ref_3_email', models.EmailField(blank=True, max_length=255, verbose_name='Email')),
                ('ref_3_name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('ref_3_sent', models.BooleanField(default=False)),
                ('ref_1_letter', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('ref_2_letter', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('ref_3_letter', models.FileField(blank=True, upload_to=users.validators.user_directory_path, validators=[users.validators.validate_file_extension])),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('sponsor_1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsor_1', to='users.Sponsor')),
                ('sponsor_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsor_2', to='users.Sponsor')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
